{"version":3,"file":"libs_shared_hooks_src_index_ts-_50b40.js","mappings":";;;;;;;;;;;;;;;;AAA+B;AACM;AACG;;;;;;;;;;;;;;;;;;;;ACFsB;AAC7B;AACS;AAChB;AAE1B,MAAMI,QAAQ,GAAGC,+CAA0B;AAEpC,MAAME,gBAAgB,GAAGA,CAAA,KAAM;EACpC,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGR,+CAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMS,KAAK,GAAGR,wDAAW,CAACF,wEAAkB,CAAC;EAC7C,MAAMW,kBAAkB,GAAG;IACzBC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASH,KAAM,EAAC;MAChC,cAAc,EAAE;IAClB;EACF,CAAC;EAED,MAAMI,KAAK,GAAG,MAAAA,CACZC,MAAsB,EACtBC,QAAgB,EAChBC,OAAgB,KACb;IACH;IACAR,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMf,8CAAK,CAACY,MAAM,CAAC,CAC5B,GAAEX,QAAS,GAAEY,QAAS,EAAC,EACxBC,OAAO,EACPN,kBACF,CAAC;MACD,IAAIO,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtBV,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOS,GAAG;MACZ;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBX,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEK,KAAK;IAAEN;EAAU,CAAC;AAC7B,CAAC;;;;;;;;;;;;;ACzCiE;AAE3D,MAAMgB,cAAc,GAAGA,CAAA,KAAM;EAClC;EACA,MAAM,CAACC,WAAW,EAAEC,aAAa,CAAC,GAAGH,gFAAsB,CAAC,CAAC;EAE7D,MAAMI,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMF,WAAW,CAAC,IAAI,CAAC,CAACG,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO;IAAEF,OAAO;IAAED;EAAc,CAAC;AACnC,CAAC;;;;;;;;;;;;;;;;;ACf4D;AACjB;AACF;AAEnC,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;EACrC,MAAMC,IAAI,GAAG/B,wDAAW,CAAC4B,uEAAiB,CAAC;EAC3C,MAAM,CAACI,SAAS,EAAEC,UAAU,CAAC,GAAGlC,+CAAQ,CAAC,KAAK,CAAC;EAE/C8B,gDAAS,CAAC,MAAM;IACd,IAAI,CAAAE,IAAI,oBAAJA,IAAI,CAAEG,YAAY,MAAM,SAAQ,EAAE;MACpCD,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,MAAM;MACLA,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACF,IAAI,oBAAJA,IAAI,CAAEG,YAAY,CAAC,CAAC;EAExB,OAAOF,SAAS;AAClB,CAAC;;;;;;;;;;;;;;;;;ACjB6D;AAClB;AACF;AAEnC,SAASG,cAAcA,CAAA,EAAG;EAC/B;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,+CAAQ,CAAC,KAAK,CAAC;EACrD,MAAMS,KAAK,GAAGR,wDAAW,CAACF,wEAAkB,CAAC;EAE7C+B,gDAAS,CAAC,MAAM;IACd;IACA;;IAEA;IACAQ,cAAc,CAAC,CAAC,CAAC7B,KAAK,CAAC;;IAEvB;IACA;;IAEA;;IAEA;IACA,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,OAAO4B,WAAW;AACpB","sources":["webpack://dashboard/../../libs/shared/hooks/src/index.ts","webpack://dashboard/../../libs/shared/hooks/src/lib/useAxiosInstance.ts","webpack://dashboard/../../libs/shared/hooks/src/lib/usePlanUpgrade.ts","webpack://dashboard/../../libs/shared/hooks/src/lib/useSetPaymentPlan.ts","webpack://dashboard/../../libs/shared/hooks/src/lib/useToken.ts"],"sourcesContent":["export * from './lib/useToken';\r\nexport * from './lib/usePlanUpgrade';\r\nexport * from './lib/useSetPaymentPlan';\r\nexport * from './lib/useAxiosInstance';\r\n","import { selectCurrentToken } from '@productize/shared/redux';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\n\nconst BASE_URL = process.env['NX_BASE_URL'];\n\nexport const useAxiosInstance = () => {\n  const [isLoading, setLoading] = useState(false);\n  const token = useSelector(selectCurrentToken);\n  const headersCredentials = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'multipart/form-data',\n    },\n  };\n\n  const query = async (\n    method: `get` | `post`,\n    endPoint: string,\n    content?: object\n  ) => {\n    // console.log(content);\n    setLoading(true);\n    try {\n      const res = await axios[method](\n        `${BASE_URL}${endPoint}`,\n        content,\n        headersCredentials\n      );\n      if (res.status === 200) {\n        setLoading(false);\n        return res;\n      }\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return { query, isLoading };\n};\n","import { useUpgradePlanMutation } from '@productize/shared/redux';\n\nexport const usePlanUpgrade = () => {\n  // mutations\n  const [upgradePlan, upgradeStatus] = useUpgradePlanMutation();\n\n  const upgrade = async () => {\n    try {\n      await upgradePlan(null).unwrap();\n    } catch (error: any) {\n      console.log(error);\n    }\n  };\n\n  return { upgrade, upgradeStatus };\n};\n","import { selectCurrentUser } from '@productize/shared/redux';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useSetPaymentPlan = () => {\n  const user = useSelector(selectCurrentUser);\n  const [isPremium, setPremium] = useState(false);\n\n  useEffect(() => {\n    if (user?.account_type === `premium`) {\n      setPremium(true);\n    } else {\n      setPremium(false);\n    }\n  }, [user?.account_type]);\n\n  return isPremium;\n};\n","import { selectCurrentToken } from '@productize/shared/redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function useTokenExists() {\r\n  // Initialize state with false since we assume the token doesn't exist initially\r\n  const [tokenExists, setTokenExists] = useState(false);\r\n  const token = useSelector(selectCurrentToken);\r\n\r\n  useEffect(() => {\r\n    // Check if a token exists in localStorage when the component mounts\r\n    // const token = token;\r\n\r\n    // Update the state based on whether the token exists\r\n    setTokenExists(!!token);\r\n\r\n    // You can also add additional logic here, like checking the token's validity\r\n    // or refreshing it if it's expired.\r\n\r\n    // This effect will run once when the component mounts and whenever the token in localStorage changes.\r\n\r\n    // Clean up the effect when the component unmounts\r\n    return () => {\r\n      // Add any cleanup logic here if needed\r\n    };\r\n  }, [token]); // Empty dependency array to run this effect only once\r\n\r\n  return tokenExists;\r\n}\r\n"],"names":["selectCurrentToken","useState","useSelector","axios","BASE_URL","process","env","useAxiosInstance","isLoading","setLoading","token","headersCredentials","headers","Authorization","query","method","endPoint","content","res","status","err","console","log","useUpgradePlanMutation","usePlanUpgrade","upgradePlan","upgradeStatus","upgrade","unwrap","error","selectCurrentUser","useEffect","useSetPaymentPlan","user","isPremium","setPremium","account_type","useTokenExists","tokenExists","setTokenExists"],"sourceRoot":""}