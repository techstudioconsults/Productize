(self.webpackChunkdashboard=self.webpackChunkdashboard||[]).push([[890,826],{890:(e,t,o)=>{o.r(t),o.d(t,{authApiSlice:()=>Q,logOut:()=>n,persistor:()=>A,resetUserStore:()=>p,selectCurrentToken:()=>c,selectCurrentUser:()=>S,selectEmailConfirmation:()=>d,selectTaskCompletedCount:()=>k,setCredentials:()=>u,setFPEmailConfirmation:()=>i,setTaskCount:()=>m,setUser:()=>h,store:()=>E,useForgotPasswordMutation:()=>R,useGoogleAuthCallbackMutation:()=>L,useGoogleAuthMutation:()=>v,useLoginMutation:()=>j,useLogoutMutation:()=>V,useResetPasswordMutation:()=>z,useSignupMutation:()=>G,useUpdateProfileMutation:()=>H,useUpgradePlanMutation:()=>_,useVerifyEmailMutation:()=>B,userApiSlice:()=>Z});var a=o(3514);const s={token:null,forgotPasswordEmailConfirmation:{emailSent:!1,email:null}},r=(0,a.createSlice)({name:"Auth",initialState:s,reducers:{setCredentials:(e,t)=>{const{accessToken:o}=t.payload;e.token=o},setFPEmailConfirmation:(e,t)=>{e.forgotPasswordEmailConfirmation=t.payload},logOut:e=>{Object.assign(e,s)}}}),{setCredentials:u,logOut:n,setFPEmailConfirmation:i}=r.actions,l=r.reducer,c=e=>e.Auth.token,d=e=>e.Auth.forgotPasswordEmailConfirmation,g={profile:null,guideTaskCompleted:0},y=(0,a.createSlice)({name:"User",initialState:g,reducers:{setUser:(e,t)=>{const{user:o}=t.payload;e.profile=o},setTaskCount:(e,t)=>{t.payload?5!==e.guideTaskCompleted&&e.guideTaskCompleted++:e.guideTaskCompleted=0},resetUserStore:e=>{Object.assign(e,g)}}}),{setUser:h,setTaskCount:m,resetUserStore:p}=y.actions,f=y.reducer,S=e=>e.User.profile,k=e=>e.User.guideTaskCompleted;var C=o(3850),w=o(7345),b=o(4549),P=o(1598);const T=(0,C.ni)({baseUrl:"https://productize-api.techstudio.academy/api",prepareHeaders:(e,{getState:t})=>{const o=t().Auth.token;return o&&e.set("Authorization",`Bearer ${o}`),e}}),q=(0,P.LC)({baseQuery:T,tagTypes:["",""],endpoints:()=>({})}),M={key:"auth",version:1,storage:b.Z},O={key:"user",version:1,storage:b.Z},U=(0,w.persistReducer)(M,l),F=(0,w.persistReducer)(O,f),E=(0,a.configureStore)({reducer:{[q.reducerPath]:q.reducer,Auth:U,User:F},middleware:e=>e({serializableCheck:!1}).concat(q.middleware)});(0,C.sj)(E.dispatch);const A=(0,w.persistStore)(E),Q=q.injectEndpoints({endpoints:e=>({login:e.mutation({query:e=>({url:"/auth/login",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;t(u({accessToken:e.token})),t(h({user:e.user}))}catch(e){console.log(e)}}}),signup:e.mutation({query:e=>({url:"/auth/register",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;t(u({accessToken:e.token})),t(h({user:e.user}))}catch(e){console.log(e)}}}),googleAuth:e.mutation({query:()=>({url:"/auth/oauth/redirect?provider=google",method:"GET"}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;e.redirect_url?window.location.href=e.redirect_url:console.error("Failed to obtain redirect URL for google")}catch(e){console.log(e)}}}),googleAuthCallback:e.mutation({query:e=>({url:"/auth/oauth/callback",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;t(u({accessToken:e.token})),t(h({user:e.user}))}catch(e){console.log(e)}}}),forgotPassword:e.mutation({query:e=>({url:"/auth/forgot-password",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:a}=await o;console.log(a),t(i({emailSent:!0,email:e.email}))}catch(e){console.log(e)}}}),resetPassword:e.mutation({query:e=>({url:"/auth/reset-password",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;console.log(e),t(i({emailSent:!1,email:null}))}catch(e){console.log(e)}}}),logout:e.mutation({query:()=>({url:"/auth/logout",method:"POST"}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;console.log(e),t(n()),t(p())}catch(e){console.log(e)}}})})}),{useLoginMutation:j,useSignupMutation:G,useGoogleAuthMutation:v,useGoogleAuthCallbackMutation:L,useForgotPasswordMutation:R,useResetPasswordMutation:z,useLogoutMutation:V}=Q,Z=q.injectEndpoints({endpoints:e=>({getUser:e.mutation({query:()=>({url:"/users/me",method:"GET"}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;t(h({user:e.data}))}catch(e){console.log(e)}}}),verifyEmail:e.mutation({query:()=>({url:"/auth/email/resend",method:"GET"}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;console.log(e)}catch(e){console.log(e)}}}),upgradePlan:e.mutation({query:()=>({url:"/payments/subscription",method:"POST"}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){try{const{data:e}=await o;console.log(e)}catch(e){console.log(e)}}}),updateProfile:e.mutation({query:e=>({url:"/users/me",method:"POST",body:Object.assign({},e)}),async onQueryStarted(e,{dispatch:t,queryFulfilled:o}){console.log(e);try{const{data:e}=await o;console.log(e),t(h({user:e.data}))}catch(e){console.log(e)}}})})}),{useUpgradePlanMutation:_,useVerifyEmailMutation:B,useUpdateProfileMutation:H}=Z}}]);